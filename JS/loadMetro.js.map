{"mappings":"I,E,E,E,E,E,C,E,E,C,E,O,E,C,E,Y,iB,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,ECiEO,SAAS,EAAU,CAAG,EAChB,KAAA,GAAP,GAAkB,CAAA,EAAM,CAAA,EAE5B,IAAM,EAAa,SAAS,aAAa,CAAC,eAEpC,EAAS,SAAS,aAAa,CAAC,MACtC,CAAA,EAAO,SAAS,CAAG,SACnB,EAAO,GAAG,CAAG,CAAC,iCAAiC,EAAE,EAAI,IAAI,CAAC,CAC1D,EAAW,WAAW,CAAC,EACzB,C,O,c,C,E,O,C,Y,C,I,I,E,I,K,E,W,C,E,a,C,C,GAEA,EADU,aAAa,OAAO,CAAC,Y,G,E","sources":["<anon>","src/JS/loadMetro.js"],"sourcesContent":["(() => {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire1655\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire1655\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"yAbor\", function(module, exports) {\n\n$parcel$export(module.exports, \"loadMetro\", () => $067f3e3bc6da1fee$export$1a0b2d56291a26a3);\n// // 파일 존재 여부를 체크하는 함수\n// function fileExists(url) {\n//   return fetch(url, { method: \"HEAD\" })\n//     .then((response) => response.ok)\n//     .catch(() => false);\n// }\n// // JSON 파일의 존재 여부를 체크하고, 존재할 경우 import\n// export function loadMetro(num) {\n//   if (num === undefined || num === null) num = 0;\n//   const background = document.querySelector(\"#background\");\n//   const newIMG = document.createElement(\"img\");\n//   newIMG.className = \"rotimg\";\n//   // JSON 파일의 경로\n//   const jsonFilePath = \"../cookie_or_death/fileMapping.json\";\n//   // JSON 파일의 존재 여부 확인\n//   fileExists(jsonFilePath)\n//     .then((exists) => {\n//       if (exists) {\n//         // JSON 파일이 존재할 경우 import\n//         import(jsonFilePath)\n//           .then((module) => {\n//             const fileMapping = module.default;\n//             const fileName = fileMapping[num] || \"IMG/metro/metro0.png\";\n//             const imagePath = `../cookie_or_death/${fileName}`;\n//             // 이미지 파일의 존재 여부 확인\n//             fileExists(imagePath)\n//               .then((imageExists) => {\n//                 if (imageExists) {\n//                   // 이미지 파일이 존재할 경우 import\n//                   import(imagePath)\n//                     .then((imageModule) => {\n//                       newIMG.src = imageModule.default;\n//                       background.appendChild(newIMG);\n//                     })\n//                     .catch((error) => {\n//                       console.error(`Error loading image: ${error}`);\n//                     });\n//                 } else {\n//                   console.error(`Image file does not exist: ${imagePath}`);\n//                 }\n//               })\n//               .catch((error) => {\n//                 console.error(`Error checking image file existence: ${error}`);\n//               });\n//           })\n//           .catch((error) => {\n//             console.error(`Error loading file mapping: ${error}`);\n//           });\n//       } else {\n//         console.error(`JSON file does not exist: ${jsonFilePath}`);\n//       }\n//     })\n//     .catch((error) => {\n//       console.error(`Error checking JSON file existence: ${error}`);\n//     });\n// }\n// const num = localStorage.getItem(\"metroNum\");\n// loadMetro(num);\nfunction $067f3e3bc6da1fee$export$1a0b2d56291a26a3(num) {\n    if (num == undefined) num = 0;\n    const background = document.querySelector(\"#background\");\n    //background 아이디 가진 속성 밑에 자식으로 img 만들어서 넣어줄거임\n    const newIMG = document.createElement(\"img\");\n    newIMG.className = \"rotimg\";\n    newIMG.src = `..cookie_or_death/IMG/metro/metro${num}.png`;\n    background.appendChild(newIMG);\n}\nvar $067f3e3bc6da1fee$var$num = localStorage.getItem(\"metroNum\");\n$067f3e3bc6da1fee$export$1a0b2d56291a26a3($067f3e3bc6da1fee$var$num);\n\n});\n\n\nparcelRequire(\"yAbor\");\n})();\n//# sourceMappingURL=loadMetro.js.map\n","// // 파일 존재 여부를 체크하는 함수\r\n// function fileExists(url) {\r\n//   return fetch(url, { method: \"HEAD\" })\r\n//     .then((response) => response.ok)\r\n//     .catch(() => false);\r\n// }\r\n\r\n// // JSON 파일의 존재 여부를 체크하고, 존재할 경우 import\r\n// export function loadMetro(num) {\r\n//   if (num === undefined || num === null) num = 0;\r\n\r\n//   const background = document.querySelector(\"#background\");\r\n//   const newIMG = document.createElement(\"img\");\r\n//   newIMG.className = \"rotimg\";\r\n\r\n//   // JSON 파일의 경로\r\n//   const jsonFilePath = \"../cookie_or_death/fileMapping.json\";\r\n\r\n//   // JSON 파일의 존재 여부 확인\r\n//   fileExists(jsonFilePath)\r\n//     .then((exists) => {\r\n//       if (exists) {\r\n//         // JSON 파일이 존재할 경우 import\r\n//         import(jsonFilePath)\r\n//           .then((module) => {\r\n//             const fileMapping = module.default;\r\n//             const fileName = fileMapping[num] || \"IMG/metro/metro0.png\";\r\n//             const imagePath = `../cookie_or_death/${fileName}`;\r\n\r\n//             // 이미지 파일의 존재 여부 확인\r\n//             fileExists(imagePath)\r\n//               .then((imageExists) => {\r\n//                 if (imageExists) {\r\n//                   // 이미지 파일이 존재할 경우 import\r\n//                   import(imagePath)\r\n//                     .then((imageModule) => {\r\n//                       newIMG.src = imageModule.default;\r\n//                       background.appendChild(newIMG);\r\n//                     })\r\n//                     .catch((error) => {\r\n//                       console.error(`Error loading image: ${error}`);\r\n//                     });\r\n//                 } else {\r\n//                   console.error(`Image file does not exist: ${imagePath}`);\r\n//                 }\r\n//               })\r\n//               .catch((error) => {\r\n//                 console.error(`Error checking image file existence: ${error}`);\r\n//               });\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error(`Error loading file mapping: ${error}`);\r\n//           });\r\n//       } else {\r\n//         console.error(`JSON file does not exist: ${jsonFilePath}`);\r\n//       }\r\n//     })\r\n//     .catch((error) => {\r\n//       console.error(`Error checking JSON file existence: ${error}`);\r\n//     });\r\n// }\r\n\r\n// const num = localStorage.getItem(\"metroNum\");\r\n// loadMetro(num);\r\n\r\nexport function loadMetro(num) {\r\n  if (num == undefined) num = 0;\r\n\r\n  const background = document.querySelector(\"#background\");\r\n  //background 아이디 가진 속성 밑에 자식으로 img 만들어서 넣어줄거임\r\n  const newIMG = document.createElement(\"img\");\r\n  newIMG.className = \"rotimg\";\r\n  newIMG.src = `..cookie_or_death/IMG/metro/metro${num}.png`;\r\n  background.appendChild(newIMG);\r\n}\r\nvar num = localStorage.getItem(\"metroNum\");\r\nloadMetro(num);\r\n"],"names":["$parcel$global","$parcel$modules","$parcel$inits","parcelRequire","globalThis","id","exports","init","module","call","err","Error","code","register","parcelRegister","$067f3e3bc6da1fee$export$1a0b2d56291a26a3","num","undefined","background","document","querySelector","newIMG","createElement","className","src","appendChild","Object","defineProperty","get","set","s","enumerable","configurable","localStorage","getItem"],"version":3,"file":"loadMetro.js.map"}